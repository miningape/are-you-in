generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model UserAuthorization {
    id String @id @default(uuid())

    email String @unique

    user    User   @relation(fields: [user_id], references: [id])
    user_id String @unique
}

model User {
    id String @id @default(uuid())

    company    Company @relation(fields: [company_id], references: [id])
    company_id String

    authorization UserAuthorization?

    name          String?
    flavour       String?
    picture_url   String?
    registrations Registration[]

    created_at         DateTime           @default(now())
    deleted_at         DateTime?
    push_subscriptions PushSubscription[]
}

model Company {
    id String @id @default(uuid())

    name        String?
    picture_url String?

    users User[]

    settings    Settings @relation(fields: [settings_id], references: [id])
    settings_id String   @unique
}

model Settings {
    id String @id @default(uuid())

    push_notifications_at String
    auto_deny_at          String
    timezone              String

    last_denied_on               DateTime? @db.Date
    last_pushed_notifications_on DateTime? @db.Date

    company Company?
}

enum RegistrationStatus {
    In
    Out
}

model Registration {
    id String @id @default(uuid())

    user    User   @relation(fields: [user_id], references: [id])
    user_id String

    day        DateTime           @default(now()) @db.Date
    created_at DateTime           @default(now())
    status     RegistrationStatus

    @@unique([user_id, created_at])
}

/// Deprecated - safest to use this + `assertTokenValid`:authentication.ts
model ServerToken {
    id String @id @default(uuid())

    token String @unique @default(uuid())

    created_at DateTime  @default(now())
    used_at    DateTime?
}

model PushSubscription {
    id String @id @default(uuid())

    endpoint    String
    keys_p256dh String
    keys_auth   String

    created_at DateTime  @default(now())
    deleted_at DateTime?

    user    User   @relation(fields: [user_id], references: [id])
    user_id String

    @@unique([endpoint, user_id])
}
